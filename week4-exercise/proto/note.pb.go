// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/note.proto

package note

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Con so phai khac nhau, duy nhat
//
type Note struct {
	Id                   int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Completed            bool                 `protobuf:"varint,3,opt,name=completed,proto3" json:"completed,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Note) Reset()         { *m = Note{} }
func (m *Note) String() string { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()    {}
func (*Note) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f1ccfac48034b3a, []int{0}
}

func (m *Note) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Note.Unmarshal(m, b)
}
func (m *Note) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Note.Marshal(b, m, deterministic)
}
func (m *Note) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Note.Merge(m, src)
}
func (m *Note) XXX_Size() int {
	return xxx_messageInfo_Note.Size(m)
}
func (m *Note) XXX_DiscardUnknown() {
	xxx_messageInfo_Note.DiscardUnknown(m)
}

var xxx_messageInfo_Note proto.InternalMessageInfo

func (m *Note) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Note) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Note) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *Note) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Note) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type NoteReq struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Completed            bool     `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoteReq) Reset()         { *m = NoteReq{} }
func (m *NoteReq) String() string { return proto.CompactTextString(m) }
func (*NoteReq) ProtoMessage()    {}
func (*NoteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f1ccfac48034b3a, []int{1}
}

func (m *NoteReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoteReq.Unmarshal(m, b)
}
func (m *NoteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoteReq.Marshal(b, m, deterministic)
}
func (m *NoteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteReq.Merge(m, src)
}
func (m *NoteReq) XXX_Size() int {
	return xxx_messageInfo_NoteReq.Size(m)
}
func (m *NoteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteReq.DiscardUnknown(m)
}

var xxx_messageInfo_NoteReq proto.InternalMessageInfo

func (m *NoteReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *NoteReq) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type NoteFindReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoteFindReq) Reset()         { *m = NoteFindReq{} }
func (m *NoteFindReq) String() string { return proto.CompactTextString(m) }
func (*NoteFindReq) ProtoMessage()    {}
func (*NoteFindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f1ccfac48034b3a, []int{2}
}

func (m *NoteFindReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoteFindReq.Unmarshal(m, b)
}
func (m *NoteFindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoteFindReq.Marshal(b, m, deterministic)
}
func (m *NoteFindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteFindReq.Merge(m, src)
}
func (m *NoteFindReq) XXX_Size() int {
	return xxx_messageInfo_NoteFindReq.Size(m)
}
func (m *NoteFindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteFindReq.DiscardUnknown(m)
}

var xxx_messageInfo_NoteFindReq proto.InternalMessageInfo

func (m *NoteFindReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type NoteUpdateReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Completed            bool     `protobuf:"varint,3,opt,name=completed,proto3" json:"completed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoteUpdateReq) Reset()         { *m = NoteUpdateReq{} }
func (m *NoteUpdateReq) String() string { return proto.CompactTextString(m) }
func (*NoteUpdateReq) ProtoMessage()    {}
func (*NoteUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f1ccfac48034b3a, []int{3}
}

func (m *NoteUpdateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoteUpdateReq.Unmarshal(m, b)
}
func (m *NoteUpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoteUpdateReq.Marshal(b, m, deterministic)
}
func (m *NoteUpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteUpdateReq.Merge(m, src)
}
func (m *NoteUpdateReq) XXX_Size() int {
	return xxx_messageInfo_NoteUpdateReq.Size(m)
}
func (m *NoteUpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteUpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_NoteUpdateReq proto.InternalMessageInfo

func (m *NoteUpdateReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NoteUpdateReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *NoteUpdateReq) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type NoteDeleteReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoteDeleteReq) Reset()         { *m = NoteDeleteReq{} }
func (m *NoteDeleteReq) String() string { return proto.CompactTextString(m) }
func (*NoteDeleteReq) ProtoMessage()    {}
func (*NoteDeleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f1ccfac48034b3a, []int{4}
}

func (m *NoteDeleteReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoteDeleteReq.Unmarshal(m, b)
}
func (m *NoteDeleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoteDeleteReq.Marshal(b, m, deterministic)
}
func (m *NoteDeleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteDeleteReq.Merge(m, src)
}
func (m *NoteDeleteReq) XXX_Size() int {
	return xxx_messageInfo_NoteDeleteReq.Size(m)
}
func (m *NoteDeleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteDeleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_NoteDeleteReq proto.InternalMessageInfo

func (m *NoteDeleteReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type NoteDeleteRes struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoteDeleteRes) Reset()         { *m = NoteDeleteRes{} }
func (m *NoteDeleteRes) String() string { return proto.CompactTextString(m) }
func (*NoteDeleteRes) ProtoMessage()    {}
func (*NoteDeleteRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f1ccfac48034b3a, []int{5}
}

func (m *NoteDeleteRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoteDeleteRes.Unmarshal(m, b)
}
func (m *NoteDeleteRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoteDeleteRes.Marshal(b, m, deterministic)
}
func (m *NoteDeleteRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteDeleteRes.Merge(m, src)
}
func (m *NoteDeleteRes) XXX_Size() int {
	return xxx_messageInfo_NoteDeleteRes.Size(m)
}
func (m *NoteDeleteRes) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteDeleteRes.DiscardUnknown(m)
}

var xxx_messageInfo_NoteDeleteRes proto.InternalMessageInfo

func (m *NoteDeleteRes) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Note)(nil), "note.Note")
	proto.RegisterType((*NoteReq)(nil), "note.NoteReq")
	proto.RegisterType((*NoteFindReq)(nil), "note.NoteFindReq")
	proto.RegisterType((*NoteUpdateReq)(nil), "note.NoteUpdateReq")
	proto.RegisterType((*NoteDeleteReq)(nil), "note.NoteDeleteReq")
	proto.RegisterType((*NoteDeleteRes)(nil), "note.NoteDeleteRes")
}

func init() {
	proto.RegisterFile("proto/note.proto", fileDescriptor_5f1ccfac48034b3a)
}

var fileDescriptor_5f1ccfac48034b3a = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0x31, 0x4d, 0xdb, 0x29, 0x15, 0x5d, 0x3d, 0x84, 0xa0, 0x34, 0x2c, 0x88, 0x11,
	0x21, 0x85, 0xea, 0xc5, 0x83, 0x87, 0xa2, 0x78, 0xf4, 0x90, 0xea, 0x59, 0xda, 0x64, 0x2c, 0x81,
	0xb6, 0x1b, 0x9b, 0xa9, 0xbf, 0xaf, 0x3f, 0x4d, 0x76, 0x37, 0x69, 0x34, 0x44, 0xf4, 0xb6, 0x33,
	0xf9, 0x66, 0xe7, 0xbd, 0x97, 0x85, 0xa3, 0x6c, 0x23, 0x49, 0x8e, 0xd6, 0x92, 0x30, 0xd4, 0x47,
	0x6e, 0xab, 0xb3, 0x37, 0x5c, 0x48, 0xb9, 0x58, 0xe2, 0x48, 0xf7, 0xe6, 0xdb, 0xf7, 0x11, 0xa5,
	0x2b, 0xcc, 0x69, 0xb6, 0xca, 0x0c, 0x26, 0x76, 0x0c, 0xec, 0x67, 0x49, 0xc8, 0x0f, 0xc1, 0x4a,
	0x13, 0x97, 0xf9, 0x2c, 0x68, 0x47, 0x56, 0x9a, 0xf0, 0x53, 0x68, 0x53, 0x4a, 0x4b, 0x74, 0x2d,
	0x9f, 0x05, 0xbd, 0xc8, 0x14, 0xfc, 0x0c, 0x7a, 0xb1, 0x5c, 0x65, 0x4b, 0x24, 0x4c, 0xdc, 0x03,
	0x9f, 0x05, 0xdd, 0xa8, 0x6a, 0xf0, 0x3b, 0x80, 0x78, 0x83, 0x33, 0xc2, 0xe4, 0x6d, 0x46, 0xae,
	0xed, 0xb3, 0xa0, 0x3f, 0xf6, 0x42, 0x23, 0x21, 0x2c, 0x25, 0x84, 0x2f, 0xa5, 0x84, 0xa8, 0x57,
	0xd0, 0x13, 0x52, 0xa3, 0xdb, 0x2c, 0x29, 0x47, 0xdb, 0x7f, 0x8f, 0x16, 0xf4, 0x84, 0xc4, 0x3d,
	0x74, 0x94, 0x83, 0x08, 0x3f, 0x2a, 0xd1, 0xec, 0x57, 0xd1, 0x56, 0x4d, 0xb4, 0x38, 0x87, 0xbe,
	0x1a, 0x7f, 0x4a, 0xd7, 0x89, 0xba, 0xa2, 0x96, 0x83, 0x98, 0xc2, 0x40, 0x7d, 0x7e, 0xd5, 0xeb,
	0x1a, 0x80, 0x6a, 0xa7, 0xfd, 0xef, 0xa0, 0xc4, 0xd0, 0x5c, 0xfa, 0x88, 0xaa, 0x6c, 0xda, 0x7a,
	0xf5, 0x13, 0xc8, 0xb9, 0x0b, 0x9d, 0x7c, 0x1b, 0xc7, 0x98, 0xe7, 0x9a, 0xea, 0x46, 0x65, 0x39,
	0xde, 0x31, 0x63, 0x60, 0x8a, 0x9b, 0xcf, 0x34, 0x46, 0x7e, 0x01, 0xce, 0x83, 0x8e, 0x95, 0x0f,
	0x42, 0xfd, 0x1e, 0x8a, 0x70, 0x3c, 0xa8, 0x4a, 0xd1, 0xe2, 0x97, 0x60, 0x2b, 0xcb, 0xfc, 0xb8,
	0xea, 0x16, 0x11, 0xd4, 0xc0, 0x6b, 0x70, 0x8c, 0x79, 0x7e, 0x52, 0xf5, 0xf7, 0x71, 0xd4, 0xe0,
	0x5b, 0x70, 0x8c, 0xe6, 0xef, 0xf0, 0xde, 0xa6, 0xd7, 0xd0, 0xcc, 0x45, 0x6b, 0xee, 0xe8, 0x1f,
	0x7c, 0xf3, 0x15, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xfb, 0xb1, 0xc3, 0xc6, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NoteServiceClient is the client API for NoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoteServiceClient interface {
	Create(ctx context.Context, in *NoteReq, opts ...grpc.CallOption) (*Note, error)
	Find(ctx context.Context, in *NoteFindReq, opts ...grpc.CallOption) (*Note, error)
	Update(ctx context.Context, in *NoteUpdateReq, opts ...grpc.CallOption) (*Note, error)
	Delete(ctx context.Context, in *NoteDeleteReq, opts ...grpc.CallOption) (*NoteDeleteRes, error)
}

type noteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteServiceClient(cc grpc.ClientConnInterface) NoteServiceClient {
	return &noteServiceClient{cc}
}

func (c *noteServiceClient) Create(ctx context.Context, in *NoteReq, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/note.NoteService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) Find(ctx context.Context, in *NoteFindReq, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/note.NoteService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) Update(ctx context.Context, in *NoteUpdateReq, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/note.NoteService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) Delete(ctx context.Context, in *NoteDeleteReq, opts ...grpc.CallOption) (*NoteDeleteRes, error) {
	out := new(NoteDeleteRes)
	err := c.cc.Invoke(ctx, "/note.NoteService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteServiceServer is the server API for NoteService service.
type NoteServiceServer interface {
	Create(context.Context, *NoteReq) (*Note, error)
	Find(context.Context, *NoteFindReq) (*Note, error)
	Update(context.Context, *NoteUpdateReq) (*Note, error)
	Delete(context.Context, *NoteDeleteReq) (*NoteDeleteRes, error)
}

// UnimplementedNoteServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNoteServiceServer struct {
}

func (*UnimplementedNoteServiceServer) Create(ctx context.Context, req *NoteReq) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedNoteServiceServer) Find(ctx context.Context, req *NoteFindReq) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (*UnimplementedNoteServiceServer) Update(ctx context.Context, req *NoteUpdateReq) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedNoteServiceServer) Delete(ctx context.Context, req *NoteDeleteReq) (*NoteDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterNoteServiceServer(s *grpc.Server, srv NoteServiceServer) {
	s.RegisterService(&_NoteService_serviceDesc, srv)
}

func _NoteService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.NoteService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).Create(ctx, req.(*NoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.NoteService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).Find(ctx, req.(*NoteFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.NoteService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).Update(ctx, req.(*NoteUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.NoteService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).Delete(ctx, req.(*NoteDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "note.NoteService",
	HandlerType: (*NoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NoteService_Create_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _NoteService_Find_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NoteService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NoteService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/note.proto",
}
